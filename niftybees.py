# -*- coding: utf-8 -*-
"""niftyBeES_investment_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cV9EC_CBcso8-Gia5dgSkjEPiQQB1XHe
"""

import yfinance as yf


ticker = 'NIFTYBEES.NS'
data = yf.download(ticker, start="2020-01-01", end="2024-12-31")


data.to_csv('niftybees_data.csv')

print(data.head())

import pandas as pd


data = pd.read_csv('niftybees_data.csv', skiprows=2)

# Renaming the columns
data.columns = ['Date', 'Price', 'Adj Close', 'Close', 'High', 'Low', 'Volume']

# Set 'Date' as index and convert it to datetime format
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)


print(data.head())

import pandas as pd


highest_price = data['Price'].iloc[0]
drop_threshold_25 = 25
drop_threshold_10 = 10
investment_per_drop_25 = 200000
investment_per_drop_10 = 100000
drop_log = []
total_investment = 0
total_units_purchased = 0
total_returns = 0

# Iterate through data to find 10% and 25% drops from the highest price
for i in range(1, len(data)):
    price = data['Price'].iloc[i]
    date = data.index[i]
    percentage_drop = ((highest_price - price) / highest_price) * 100  # Calculate percentage drop from the highest price

    # Track the highest price encountered
    if price > highest_price:
        highest_price = price

    # Check for 25% or more drop from the highest price
    if percentage_drop >= drop_threshold_25:
        # Calculate the number of units purchased with ₹2 lakh
        units_purchased = investment_per_drop_25 / price
        total_investment += investment_per_drop_25
        total_units_purchased += units_purchased

        # Calculate the return for this investment (based on the price at the point of purchase)
        current_return = units_purchased * (highest_price - price)
        total_returns += current_return

        # Log the details of the drop and investment
        drop_log.append({
            "Date": date,
            "Price": price,
            "Percentage Drop": percentage_drop,
            "Investment": investment_per_drop_25,
            "Units Purchased": units_purchased,
            "Return": current_return
        })

    # Check for 10% or more drop from the highest price
    elif percentage_drop >= drop_threshold_10:
        # Calculate the number of units purchased with ₹1 lakh
        units_purchased = investment_per_drop_10 / price
        total_investment += investment_per_drop_10
        total_units_purchased += units_purchased

        # Calculate the return for this investment (based on the price at the point of purchase)
        current_return = units_purchased * (highest_price - price)
        total_returns += current_return

        # Log the details of the drop and investment
        drop_log.append({
            "Date": date,
            "Price": price,
            "Percentage Drop": percentage_drop,
            "Investment": investment_per_drop_10,
            "Units Purchased": units_purchased,
            "Return": current_return
        })


drop_log_df = pd.DataFrame(drop_log)

# Display the dates, prices, and investments where the drop was 10% or more
if not drop_log_df.empty:
    print("\nDates with 10% or more drops from the highest price and investment details:")
    print(drop_log_df)
else:
    print("\nNo 10% or more drops from the highest price were found.")

    # Print total investment, units purchased, and returns
print(f"\nTotal Investment: ₹{total_investment}")
print(f"Total Units Purchased: {total_units_purchased}")
print(f"Total Returns: ₹{total_returns}")

total_investment_final = total_investment
total_returns_final = total_returns

# Pie chart data
labels = ['Total Investment (₹)', 'Total Returns (₹)']
sizes = [total_investment_final, total_returns_final]
colors = ['yellow', 'red']

# Creating a pie chart
plt.figure(figsize=(8, 6))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', colors=colors, startangle=140, wedgeprops={'edgecolor': 'black'})
plt.title('Distribution of Total Investment and Returns')

# Display the pie chart
plt.axis('equal')
plt.show()

import matplotlib.pyplot as plt
# Plotting
plt.figure(figsize=(10, 6))

# Plot Price vs Date
plt.subplot(3, 1, 1)
plt.plot(data.index, data['Price'], label='Price', color='blue')
plt.xlabel('Date')
plt.ylabel('Price')
plt.title('Price Over Time')
plt.grid(True)

# Plot Investment and Returns over time
investment_dates = drop_log_df['Date']
investment_values = drop_log_df['Investment']
returns_values = drop_log_df['Return']

plt.subplot(3, 1, 2)
plt.plot(investment_dates, investment_values, label='Investment', color='green')
plt.plot(investment_dates, returns_values, label='Return', color='red')
plt.xlabel('Date')
plt.ylabel('Amount (₹)')
plt.title('Investment and Returns Over Time')
plt.legend()
plt.grid(True)


plt.tight_layout()
plt.show()

"""**Price Over Time (Top Plot):**

This shows the price fluctuation over time, and it seems that the price starts lower and increases steadily over the years, with occasional drops.
This pattern is typical of a market with periodic corrections or price fluctuations. The price appears to increase significantly toward the end of the period.

**Investment and Returns Over Time (bottom Plot):**

* The green lines represent the investments made at the 10% and 25% drop points. For every 10% or 25% drop in price, an investment is made (₹1 lakh for 10%, ₹2 lakh for 25%).
* The red lines represent returns, which are based on the difference between the price when the investment was made and the price when the investment returned.
* It looks like the returns are low or nonexistent for many periods, indicating that the price did not significantly rise after these investments.
The sharp spikes in green and red lines reflect specific drops and their corresponding investments. It appears that after these investments, the returns start showing up more visibly later.

"""

